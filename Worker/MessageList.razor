@using System.Threading.Channels
@using Microsoft.AspNetCore.Components.Web

@implements IDisposable
@inject MessageListener MessageReader
@rendermode RenderMode.InteractiveServer

<h2>Messages</h2>

@if (messages is null)
{
    <p>Waiting for messages...</p>
}
else
{
    <ul>
        @foreach (var message in messages)
        {
            <li>
                <pre>@message</pre>
            </li>
        }
    </ul>
}

@code {
    List<string>? messages;
    Channel<string> channel = Channel.CreateUnbounded<string>();

    protected override async Task OnInitializedAsync()
    {
        await MessageReader.SubscribeAsync(channel);

        _ = Task.Run(async () =>
        {
            await foreach (var message in channel.Reader.ReadAllAsync())
            {
                await InvokeAsync(() =>
                {
                    messages ??= [];

                    messages.Add(message);

                    StateHasChanged();
                });
            }
        });
    }

    public void Dispose()
    {
        channel.Writer.TryComplete();
    }
}
